// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: tendermint/mempool/cat/preconf.proto

package cat

import (
	fmt "fmt"
	crypto "github.com/cometbft/cometbft/proto/tendermint/crypto"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	_ "github.com/cosmos/gogoproto/types"
	github_com_cosmos_gogoproto_types "github.com/cosmos/gogoproto/types"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type PreconfirmationMessage struct {
	Signature []byte           `protobuf:"bytes,1,opt,name=signature,proto3" json:"signature,omitempty"`
	PubKey    crypto.PublicKey `protobuf:"bytes,2,opt,name=pub_key,json=pubKey,proto3" json:"pub_key"`
	TxHashes  [][]byte         `protobuf:"bytes,3,rep,name=tx_hashes,json=txHashes,proto3" json:"tx_hashes,omitempty"`
	Timestamp time.Time        `protobuf:"bytes,4,opt,name=timestamp,proto3,stdtime" json:"timestamp"`
}

func (m *PreconfirmationMessage) Reset()         { *m = PreconfirmationMessage{} }
func (m *PreconfirmationMessage) String() string { return proto.CompactTextString(m) }
func (*PreconfirmationMessage) ProtoMessage()    {}
func (*PreconfirmationMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_e574c2f815fd1065, []int{0}
}
func (m *PreconfirmationMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PreconfirmationMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PreconfirmationMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PreconfirmationMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PreconfirmationMessage.Merge(m, src)
}
func (m *PreconfirmationMessage) XXX_Size() int {
	return m.Size()
}
func (m *PreconfirmationMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_PreconfirmationMessage.DiscardUnknown(m)
}

var xxx_messageInfo_PreconfirmationMessage proto.InternalMessageInfo

func (m *PreconfirmationMessage) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

func (m *PreconfirmationMessage) GetPubKey() crypto.PublicKey {
	if m != nil {
		return m.PubKey
	}
	return crypto.PublicKey{}
}

func (m *PreconfirmationMessage) GetTxHashes() [][]byte {
	if m != nil {
		return m.TxHashes
	}
	return nil
}

func (m *PreconfirmationMessage) GetTimestamp() time.Time {
	if m != nil {
		return m.Timestamp
	}
	return time.Time{}
}

func init() {
	proto.RegisterType((*PreconfirmationMessage)(nil), "tendermint.mempool.cat.PreconfirmationMessage")
}

func init() {
	proto.RegisterFile("tendermint/mempool/cat/preconf.proto", fileDescriptor_e574c2f815fd1065)
}

var fileDescriptor_e574c2f815fd1065 = []byte{
	// 330 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x91, 0xb1, 0x6e, 0xea, 0x30,
	0x14, 0x86, 0xe3, 0x0b, 0xe2, 0x42, 0x2e, 0x53, 0x74, 0x85, 0x22, 0x2e, 0x0a, 0xe8, 0xaa, 0x03,
	0x93, 0x2d, 0xb5, 0x53, 0xd5, 0x2d, 0x53, 0x25, 0x54, 0x09, 0xa5, 0x9d, 0xba, 0xa0, 0xc4, 0x3d,
	0x18, 0x0b, 0x1c, 0x5b, 0xf1, 0x89, 0x44, 0xde, 0x82, 0xc7, 0x62, 0x64, 0xe8, 0xd0, 0xa9, 0xad,
	0xe0, 0x45, 0x2a, 0x12, 0x68, 0x18, 0xba, 0x9d, 0xe3, 0xf3, 0xf9, 0xff, 0xfd, 0xfb, 0xb8, 0x57,
	0x08, 0xe9, 0x0b, 0x64, 0x4a, 0xa6, 0xc8, 0x14, 0x28, 0xa3, 0xf5, 0x8a, 0xf1, 0x18, 0x99, 0xc9,
	0x80, 0xeb, 0x74, 0x4e, 0x4d, 0xa6, 0x51, 0x7b, 0xbd, 0x9a, 0xa2, 0x27, 0x8a, 0xf2, 0x18, 0xfb,
	0x7f, 0x85, 0x16, 0xba, 0x44, 0xd8, 0xb1, 0xaa, 0xe8, 0xfe, 0x50, 0x68, 0x2d, 0x56, 0xc0, 0xca,
	0x2e, 0xc9, 0xe7, 0x0c, 0xa5, 0x02, 0x8b, 0xb1, 0x32, 0x27, 0x60, 0x70, 0x61, 0xca, 0xb3, 0xc2,
	0xa0, 0x66, 0x4b, 0x28, 0x6c, 0x35, 0xfd, 0xff, 0x4a, 0xdc, 0xde, 0xb4, 0xb2, 0x97, 0x99, 0x8a,
	0x51, 0xea, 0xf4, 0x01, 0xac, 0x8d, 0x05, 0x78, 0x03, 0xb7, 0x63, 0xa5, 0x48, 0x63, 0xcc, 0x33,
	0xf0, 0xc9, 0x88, 0x8c, 0xbb, 0x51, 0x7d, 0xe0, 0xdd, 0xb9, 0xbf, 0x4d, 0x9e, 0xcc, 0x96, 0x50,
	0xf8, 0xbf, 0x46, 0x64, 0xfc, 0xe7, 0x7a, 0x40, 0x2f, 0xde, 0x5d, 0x19, 0xd1, 0x69, 0x9e, 0xac,
	0x24, 0x9f, 0x40, 0x11, 0x36, 0xb7, 0xef, 0x43, 0x27, 0x6a, 0x99, 0x3c, 0x99, 0x40, 0xe1, 0xfd,
	0x73, 0x3b, 0xb8, 0x9e, 0x2d, 0x62, 0xbb, 0x00, 0xeb, 0x37, 0x46, 0x8d, 0x71, 0x37, 0x6a, 0xe3,
	0xfa, 0xbe, 0xec, 0xbd, 0xd0, 0xed, 0x7c, 0x67, 0xf0, 0x9b, 0xa5, 0x76, 0x9f, 0x56, 0x29, 0xe9,
	0x39, 0x25, 0x7d, 0x3a, 0x13, 0x61, 0xfb, 0xa8, 0xbc, 0xf9, 0x18, 0x92, 0xa8, 0xbe, 0x16, 0x3e,
	0x6e, 0xf7, 0x01, 0xd9, 0xed, 0x03, 0xf2, 0xb9, 0x0f, 0xc8, 0xe6, 0x10, 0x38, 0xbb, 0x43, 0xe0,
	0xbc, 0x1d, 0x02, 0xe7, 0xf9, 0x56, 0x48, 0x5c, 0xe4, 0x09, 0xe5, 0x5a, 0x31, 0xae, 0x15, 0x60,
	0x32, 0xc7, 0xba, 0xa8, 0xbe, 0xf7, 0xe7, 0x35, 0x25, 0xad, 0x72, 0x7a, 0xf3, 0x15, 0x00, 0x00,
	0xff, 0xff, 0x1b, 0x07, 0xcd, 0x97, 0xc7, 0x01, 0x00, 0x00,
}

func (m *PreconfirmationMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PreconfirmationMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PreconfirmationMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	n1, err1 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(m.Timestamp, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(m.Timestamp):])
	if err1 != nil {
		return 0, err1
	}
	i -= n1
	i = encodeVarintPreconf(dAtA, i, uint64(n1))
	i--
	dAtA[i] = 0x22
	if len(m.TxHashes) > 0 {
		for iNdEx := len(m.TxHashes) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.TxHashes[iNdEx])
			copy(dAtA[i:], m.TxHashes[iNdEx])
			i = encodeVarintPreconf(dAtA, i, uint64(len(m.TxHashes[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	{
		size, err := m.PubKey.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintPreconf(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Signature) > 0 {
		i -= len(m.Signature)
		copy(dAtA[i:], m.Signature)
		i = encodeVarintPreconf(dAtA, i, uint64(len(m.Signature)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintPreconf(dAtA []byte, offset int, v uint64) int {
	offset -= sovPreconf(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *PreconfirmationMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Signature)
	if l > 0 {
		n += 1 + l + sovPreconf(uint64(l))
	}
	l = m.PubKey.Size()
	n += 1 + l + sovPreconf(uint64(l))
	if len(m.TxHashes) > 0 {
		for _, b := range m.TxHashes {
			l = len(b)
			n += 1 + l + sovPreconf(uint64(l))
		}
	}
	l = github_com_cosmos_gogoproto_types.SizeOfStdTime(m.Timestamp)
	n += 1 + l + sovPreconf(uint64(l))
	return n
}

func sovPreconf(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPreconf(x uint64) (n int) {
	return sovPreconf(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *PreconfirmationMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPreconf
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PreconfirmationMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PreconfirmationMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPreconf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPreconf
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthPreconf
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signature = append(m.Signature[:0], dAtA[iNdEx:postIndex]...)
			if m.Signature == nil {
				m.Signature = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PubKey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPreconf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPreconf
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPreconf
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PubKey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxHashes", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPreconf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPreconf
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthPreconf
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TxHashes = append(m.TxHashes, make([]byte, postIndex-iNdEx))
			copy(m.TxHashes[len(m.TxHashes)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPreconf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPreconf
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPreconf
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(&m.Timestamp, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPreconf(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPreconf
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPreconf(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPreconf
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPreconf
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPreconf
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPreconf
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPreconf
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPreconf
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPreconf        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPreconf          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPreconf = fmt.Errorf("proto: unexpected end of group")
)
